const express = require('express');
const cors = require('cors');
const rutas = require('./routes/placositos.routes.js');
const expressWs = require('express-ws')(express()); // Inicializa express-ws
const WebSocket = require('ws');

const app = expressWs.app;

// Middlewares
app.use(cors());
app.use(express.json());

// Lista de clientes WebSocket conectados
const clients = [];

// socket
const aWss = expressWs.getWss(); // Usa expressWs directamente
global.aWss = aWss; // Mala práctica, pero no encontré otra forma de usarlo en routes

// Ruta WebSocket
app.ws('/ws', (ws, req) => {
  // Agrega el cliente a la lista
  clients.push(ws);

  // Log de clientes para verificar
  console.log('Clientes conectados:', clients.length);

  // Escucha el evento de cierre de conexión y remueve el cliente de la lista
  ws.on('close', () => {
    const index = clients.indexOf(ws);
    if (index > -1) {
      clients.splice(index, 1);
    }

    // Log de clientes después de remover uno
    console.log('Clientes conectados después de cerrar conexión:', clients.length);
  });

  // Envía un mensaje a todos los clientes conectados cuando un nuevo cliente se conecta
  aWss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send('¡Un nuevo cliente se ha conectado!');
    }
  });

  // Escucha mensajes desde el cliente
  ws.on('message', (message) => {
    console.log(`Mensaje recibido desde el cliente: ${message}`);

    // Envía un mensaje de vuelta al cliente que envió el mensaje
    ws.send(`Servidor: Recibí tu mensaje: ${message}`);
  });
});

// Función para transmitir un mensaje a todos los clientes WebSocket conectados
const broadcastMessage = (message) => {
  console.log("broadcastMessage: ", message);
  if (aWss && aWss.clients) {
    aWss.clients.forEach((client) => {
      console.log('Cliente: ', client);
      if (client.readyState === WebSocket.OPEN) {
        console.log('Cliente: ', client);
        client.send(message);
      }
    });
  }
};

// Ejemplo de cómo usar la función broadcastMessage para enviar un mensaje a todos los clientes
setTimeout(() => {
  broadcastMessage('¡Hola a todos los clientes!');
}, 1000);

// Ruta de ejemplo para probar el broadcast desde una solicitud HTTP
app.get('/broadcast', (req, res) => {
  broadcastMessage('¡Mensaje de prueba enviado a todos los clientes!');
  res.send('Mensaje enviado a todos los clientes.');
});

// Manejador de errores para rutas no encontradas
app.use((req, res, next) => {
  res.status(404).json({
    message: 'No se encontró esta ruta',
  });
});

module.exports = app;


